Here is a dynamic nunjucks XML template for the `presentation.xml` configuration file. This template contains the necessary structure and elements based on the project specification and documentation provided, allowing for dynamic data filling where required.

```xml
<ber:presentation xmlns:ber="http://www.example.com/schemas/ber" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ber:reportArray>
        {% for report in reports %}
        <ber:{{ report.type }} id="{{ report.id }}" name="{{ report.name }}" orientation="{{ report.orientation }}">
            <ber:description>{{ report.description }}</ber:description>
            <ber:outputFormatArray>
                {% for format in report.outputFormats %}
                <ber:outputFormat{% if format.default %} default="true"{% endif %}>{{ format.name }}</ber:outputFormat>
                {% endfor %}
            </ber:outputFormatArray>
            <ber:templateName>{{ report.templateName }}</ber:templateName>
            {% if report.featureTypes %}
            <ber:featureTypeArray>
                {% for featureType in report.featureTypes %}
                <ber:featureType xlink:href="model.xml#{{ featureType.id }}"/>
                {% endfor %}
            </ber:featureTypeArray>
            {% endif %}
            {% if report.reportQueries %}
            <ber:reportQueryArray>
                {% for query in report.reportQueries %}
                <ber:reportQuery>
                    <ber:featureType xlink:href="model.xml#{{ query.featureType }}"/>
                    <ber:attributeArray>
                        {% for attribute in query.attributes %}
                        <ber:attribute xlink:href="model.xml#{{ attribute }}"/>
                        {% endfor %}
                    </ber:attributeArray>
                    <ogc:Filter>
                        {{ query.filter }}
                    </ogc:Filter>
                    <ber:orderBy>
                        <ber:orderByItem direction="ascending">
                            <ber:commonAttribute attributeName="{{ query.orderByAttribute }}">
                                <ber:featureType featureTypeName="{{ query.orderByFeatureType }}"/>
                            </ber:commonAttribute>
                        </ber:orderByItem>
                    </ber:orderBy>
                </ber:reportQuery>
                {% endfor %}
            </ber:reportQueryArray>
            {% endif %}
        </ber:{{ report.type }}>
        {% endfor %}
    </ber:reportArray>

    <ber:lineWeights>
        <ber:lineWeight display="0" print="0.025"/>
        <ber:lineWeight display="1" print="0.125"/>
        <ber:lineWeight display="2" print="0.25"/>
        <ber:lineWeight display="3" print="0.35"/>
        <ber:lineWeight display="4" print="0.5"/>
        <ber:lineWeight display="5" print="0.75"/>
        <ber:lineWeight display="6" print="1"/>
    </ber:lineWeights>

    <ber:dwgLineWeights>
        <ber:dwgLineWeight display="0" dwg="0"/>
        <ber:dwgLineWeight display="1" dwg="0.13"/>
        <ber:dwgLineWeight display="2" dwg="0.30"/>
        <ber:dwgLineWeight display="3" dwg="0.40"/>
        <ber:dwgLineWeight display="4" dwg="0.53"/>
        <ber:dwgLineWeight display="5" dwg="0.70"/>
        <ber:dwgLineWeight display="6" dwg="0.80"/>
    </ber:dwgLineWeights>
</ber:presentation>
```

### Explanation of Dynamic Elements:

- **Report Array**: This section loops through dynamic report definitions passed to the template and outputs each report's attributes, output formats, and queries. 

- **Line Weights and DWG Line Weights**: Static elements that list line weights. These can be adjusted if your project requires different values.

### Integration:
This template can be filled dynamically with JSON data that matches the structure and placeholders mentioned, such as `reports` that will contain different report configurations as dictated by your application logic or project-specific requirements.